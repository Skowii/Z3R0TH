# ðŸ”— https://www.w3.org/TR/html-ruby-extensions/

This specification revises and extends the markup model established by HTML to express ruby. Ruby, a form of interlinear annotation, are short runs of text alongside the base text. They are typically used in East Asian documents to indicate pronunciation or to provide a short annotation. This document is developed under the terms of the Agreement on HTML Ruby Markup between W3C and the WHATWG. This document was produced by a group operating under the W3C Patent Policy . W3C maintains a public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy . This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress. This document was published by the HTML Working Group as a Working Draft using the Recommendation track . Publication as a Working Draft does not imply endorsement by W3C and its Members. This section describes the status of this document at the time of its publication. A list of current W3C publications and the latest revision of this technical report can be found in the W3C technical reports index at https://www.w3.org/TR/. 1. Introduction This section is non-normative Ruby is a name for small annotations that are rendered alongside base text. This is especially useful for Japanese and other East Asian content (ruby may be called furigana in Japanese). It is most often used to provide a reading (pronunciation guide). Ruby text is usually presented alongside the base text, using a smaller typeface. The name ruby originated from a named font size (about half the size of the normal 10 point font) used by British typesetters. Typically ruby is used in East Asian scripts to provide phonetic transcriptions of obscure and little known characters, characters that the reader is not expected to be familiar with (such as children or foreigners learning to write), or characters that have multiple readings which can t be determined by the context (eg. some Japanese names). For example it is widely used in educational materials and children s texts, but it can also be readily found in many types of literature and signage. It is also occasionally used to convey information about the meaning of ideographic characters. Specialized markup, as defined in this document, is necessary to describe the semantic associations between the base text and its annotations, to enable its various visual layouts as well as correct non-visual presentation and processing. Note: CSS Ruby Annotation Layout Module Level 1 defines the ruby layout model in CSS, enabling the ruby presentation described above and frequently desired variations. 1.1. Background and Relation to the HTML Standard A set of HTML elements to markup ruby has evolved over the years in multiple specifications, starting from the 2001 Ruby Annotation specification all the way to the current HTML Standard , with different incarnations varying in flexibility, complexity, or verbosity. While concise and effective in simple cases, the ruby model described in the HTML Standard (at the time of writing this document) is insufficiently expressive to handle all use cases well. Moreover, some aspects of it are also not interoperably implemented; yet implementing them would not completely address the remaining use cases. Additionally, these aspects are at odds with the CSS layout model. This specification is written to promote and guide implementations of a revised and extended model for ruby, in order to more completely address the needs of ruby on the Web platform. This effort is undertaken with the agreement of W3C and the WHATWG. Appendix B: Comparison With The HTML Standard summarizes the main differences, and provides a brief overview of why these differences are desirable. Note that the semantics of the subset of the HTML Standard that is interoperably implemented remain unchanged in this extension specification, making the ruby model described here backwards compatible with any ruby content supported by existing user agents. In this document, advisement blocks like this one indicate how normative parts of the document relate to and replace various part of the HTML Standard It is hoped that the changes described here will in time be adopted by the WHATWG and integrated into the HTML Standard , reducing the delta between the two documents. 2. HTML Elements for Ruby 2.1. The ruby element The ruby element represents one or more ranges of phrasing content paired with associated ruby annotations. Ruby annotations are short runs of annotation text presented alongside base text. Although primarily used in East Asian typography as a guide for pronunciation, they can also be used for other associated information. Ruby is most commonly presented as interlinear annotations, although other presentations are also used. A more complete introduction to ruby and its rendering can be found in W3C s What is ruby? article and in CSS Ruby Annotation Layout Module Level 1 . < ruby >   < rt >   </ rt ></ ruby >   < ruby >   < rt >   </ rt ></ ruby >   This example shows Japanese text, with ruby markup used to annotate the ideographs with their pronunciation. A typical rendering would be something akin to the following image: The content model of ruby elements consists of one or more of the following ruby segment sequences: One or more phrasing content nodes or rb elements (or a combination) representing the base-level content being annotated (the ruby base range ). One or more rt or rtc elements (or a combination) representing any annotations associated with the preceding base content, where each rtc element or sequence of rt elements represents one independent level of annotation (a ruby annotation range ). Each annotation range, and annotation units within each range, and can optionally be preceded by / followed by / interleaved with individual rp elements. (The optional rp element can be used to add presentational content such as parentheses, which can be useful when rendering annotations inline, including as a fallback when ruby layout is not supported.) Note: For authoring convenience, the internal ruby elements rb , rt , rtc , and rp have optional end tags. < ruby lang = zh-TW > < rb >   </ rb >< rtc >< rt >   </ rt ></ rtc >< rtc lang = zh-Latn >< rt > m i </ rt ></ rtc > </ ruby > In Taiwan, phonetic annotations for Chinese text are typically provided using Zhuyin characters (also known as Bopomofo). In mainland China, phonetic annotations are typically provided using Latin characters using Pinyin transcription. In this example, both are provided: Certain features of HTML ruby allow for simpler markup: End tags can be omitted. Text contained directly by a ruby element implicitly represents a ruby base unit (as if it were contained in an rb element). element implicitly represents a ruby base unit (as if it were contained in an element). Consecutive rt children of a ruby element are implicitly grouped into a ruby annotation range (as if they were contained in an rtc element). children of a element are implicitly grouped into a ruby annotation range (as if they were contained in an element). Text contained directly by an rtc element implicity represents a ruby annotation unit. In effect, the above example is equivalent (in meaning, though not in the DOM it produces) to the following: < ruby lang = zh-TW >   < rt >   < rtc lang = zh-Latn > m i </ ruby > Note: The CSS Ruby Annotation Layout Module Level 1 enables authors to control the rendering of the HTML ruby element and its contents, supporting a variety of layouts based on the same markup. Three rendering styles are commonly used with Zhuyin (Bopomofo) characters. (Annotations here are shown in blue for clarity, though in actual uses there would be no color distinction.) When the text is written vertically, the phonetic annotations are rendered to the right, along the base text: In horizontal writing, they are usually also typeset to the right, in this case sandwiched between individual base characters: However, sometimes Zhuyin annotations are instead typeset above horizontal base text: These differences are stylistic, not semantic, and therefore share the same markup: < ruby lang = zh-TW >< rb >   < rb >   < rt >   < rt >   </ ruby > 2.1.1. Ruby Segmentation and Pairing Within a ruby element, content is parcelled into a series of ruby segments. Ignoring inter-element whitespace and rp elements, each ruby segment consists of: ruby element: Annotating text character by character is also typical in Chinese. In this example, each character is individually annotated in its ownelement: < ruby >   < rt > qi n </ ruby >< ruby >   < rt > l  </ ruby >< ruby >   < rt > zh  </ ruby >< ruby >   < rt > x ng </ ruby >   < ruby >   < rt > sh  </ ruby >< ruby >   < rt > y  </ ruby >< ruby >   < rt > z  </ ruby >< ruby >   < rt > xi  </ ruby >   Multiple adjacent ruby segments can also be combined into the same ruby parent: < ruby >   < rt > qi n </ rt >   < rt > l  </ rt >   < rt > zh  </ rt >   < rt > x ng </ ruby >   < ruby >   < rt > sh  </ rt >   < rt > y  </ rt >   < rt > z  </ rt >   < rt > xi  </ ruby >   The process of annotation pairing associates ruby annotation units with ruby base units. Within each ruby segment, each ruby base unit is paired with a ruby annotation unit from each ruby annotation range. If a ruby annotation range consists of an rtc element that contains no rt elements, the single ruby annotation unit represented by its contents spans (is paired with) every ruby base unit in the ruby segment. Otherwise, each ruby annotation unit in the ruby annotation range is paired, in order, with the corresponding ruby base unit in the segment s ruby base range. If there are not enough ruby base units, any remaining ruby annotation units are assumed to be associated with empty, hypothetical bases inserted at the end of the ruby base range. If there are not enough ruby annotation units in a ruby annotation range, the remaining ruby base units are assumed to not have an annotation from that annotation level. In some contexts, for example when the font size or line height are too small for interlinear ruby to be readable, it is desirable to inline the ruby annotation such that it appears in parentheses after the text it annotates. This also provides an appropriate fallback rendering for user agents that do not support ruby layout. However, for compound words in Japanese particularly, per-character inlined phonetics are awkward. Instead, the more natural rendering is to place the annotation of an entire word together after its base text. For example, when typeset inline,   ( Kyoto City ) is expected to be rendered as  , not  . This can be marked up using consecutive rb elements followed by consecutive rt elements: < ruby >< rb >   < rb >   < rb >   < rt >   < rt >   < rt >   </ ruby > If each base character was immediately followed by its annotation in the markup (each base-annotation pair forming its own segment), inlining would result in the undesirable and awkward  . Note that the markup above does not automatically provide the parentheses. Parentheses can be inserted using CSS generated content when intentionally typesetting inline, however they would be missing when a UA that does not support ruby falls back to inline layout automatically from interlinear layout. The rp element can be inserted to provide the appropriate punctuation for when ruby is not supported: < ruby >< rb >   < rb >   < rb >   < rp >   < rt >   < rt >   < rt >   < rp >   </ ruby > 2.1.2. Markup Patterns for Multi-Character Ruby This section is non-normative In the simplest examples, each ruby base unit contains only a single character, a pattern often used for character-per-character phonetic annotations. However, ruby base units are not restricted to containing a single character. In some cases it may be impossible to map an annotation to the base characters individually, and the annotation may need to jointly apply to a group of characters. For example, the Japanese word for  today  is written with the characters  , literally  this + day . But it s pronounced   (ky ), which can t be broken down into a  this  part and a  day  part. Therefore phonetic ruby indicating the reading of   would be marked up as follows: < ruby >   < rt >   </ ruby > Ruby can also be used to describe the meaning of the base text, rather than (or in addition to) the pronunciation. In such cases, both the base text and the annotation are typically made of multiple characters, with no meaningful subdivision possible. Here a compound ideographic word has an English-derived synonym (written in katakana) given as an annotation: < ruby >   < rt >   </ ruby > Here a compound ideographic word has its English equivalent directly provided as an annotation: < ruby lang = "ja" >   < rt lang = "en" > editor </ ruby > In compound words, although phonetic annotations might correspond to individual characters, they are sometimes nonetheless typeset to share space above the base text, rendering similar to annotations on multi-character bases. However, there are subtle distinctions in their rendering that require encoding the pairing relationships within the compound word as well as its identification as a word. Furthermore, sharing space in this way versus rendering each pair in its own visual  column  is a stylistic preference: the markup needs to provide enough information to allow for both renderings (as well as correct inlining).    , meaning  Kyoto City . Its characters are pronounced  ,  , and  , respectively. (Distinct colors shown in these examples for clarity: in actual usage there would be no color distinction.) In this example, we will use the Japanese noun  , meaning  Kyoto City . Its characters are pronounced  ,  , and  , respectively. (Distinct colors shown in these examples for clarity: in actual usage there would be no color distinction.) Such compound words could be rendered with phonetic annotations placed over each character one by one. In this style, when an annotation is visually longer than the character it annotates, surrounding text is pushed apart, to make the correspondance between each character and its annotation clear. However, it is common to present such a word with its annotations sharing space together when they would otherwise create a separation in the base text, to preserve the implication that it is a single word. This style is called  jukugo ruby  ( jukugo  meaning  compound word ). Even when presenting as  jukugo ruby  though, the annotation are not always merged. If a line break occurs in the middle of the word, the annotations are expected to remain associated with the correct base character. Whether and how much the annotations are merged can vary, and can depend on the font size, as  jukugo ruby  only merges annotations when at least one of them is longer than its base. Ruby sized at 33% Ruby sized at 50% Ruby sized at 60% Since choosing to render as  jukugo ruby  or not is a stylistic choice, the same markup needs to enable both and it needs to encode both the pairing information within the word as well as the grouping of these pairs as a single word: < ruby >< rb >   < rb >   < rb >   < rt >   < rt >   < rt >   </ ruby > Correct  jukugo ruby  is not be possible if all the base characters are part of a single rb element and all the annotation text in a single rt element, as their individual pairings would be lost. Note: For more details on Japanese and Chinese ruby usage and rendering, see Requirements for Japanese Text Layout  ( ) (particularly Ruby and Emphasis Dots and Appendix F), Rules for Simple Placement of Japanese Ruby , and the section on Interlinear annotations of Requirements for Chinese Text Layout -   . 2.2. The rb element An rb ( ruby base ) element that is the child of a ruby element represents a ruby base unit: a unitary component of base-level text annotated by any ruby annotation(s) to which it is paired. An rb element that is not a child of a ruby element represents the same thing as its children. rb element is used, the base is implied: < ruby > base < rt > annotation </ ruby > When noelement is used, the base is implied: The element can also be made explicit: < ruby >< rb > base < rt > annotation </ ruby > Both markup patterns have identical semantics. Explicit rb elements can be useful for styling, and are necessary when marking up consecutive bases to pair with consecutive annotations (for example, when representing a compound word; see   inlining and jukugo ruby examples above). 2.3. The rt element An rt ( ruby text ) element that is the child of a ruby element or of an rtc element that is itself the child of a ruby element represents a ruby annotation unit: a unitary annotation of the ruby base unit to which it is paired. An rt element that is not a child of a ruby element nor of an rtc element that is itself the child of a ruby element represents the same thing as its children. 2.4. The rtc element An rtc ( ruby text container ) element that is the child of a ruby element represents one level of annotation (a ruby annotation range) for the preceding sequence of ruby base units (its ruby base range). Note: In simple cases, rtc elements can be omitted as a ruby annotation range is implied by consecutive rt elements. However, they are necessary in order to associate multiple levels of annotation with a single ruby base range, for example to provide both phonetic and semantic information, phonetic information in different scripts, or semantic information in different languages. In this example, the Japanese compound word   ("skillful") has phonetic annotations in both kana and romaji phonetics while at the same time maintaining the pairing to bases and annotation grouping information. This enabled by the following markup: < ruby >< rb >   < rb >   < rt >   < rt >   < rtc >< rt > jou < rt > zu </ ruby > Note: Text that is a direct child of the rtc element implicitly represents a ruby annotation unit as if it were contained in an rt element, except that this annotation spans all the bases in the segment.   , i.e.  old gold mountain ) is annotated both using pinyin to give the pronunciation, and with the original English. In this example, the Chinese word for San Francisco (, i.e.  old gold mountain ) is annotated both using pinyin to give the pronunciation, and with the original English. Which is marked up as follows: < ruby >< rb >   < rb >   < rb >   < rt > ji  < rt > j n < rt > sh n < rtc > San Francisco </ ruby > Here, a single base run of three base characters is annotated with three pinyin ruby text segments in a first (implicit) container, and an rtc element is introduced in order to provide a second single ruby annotation being the city s English name. An rtc element that is not a child of a ruby element represents the same thing as its children. 2.5. The rp element The rp ( ruby parenthetical ) element represents nothing. It is used to provide presentational content (such as parentheses) around ruby annotation units, to be shown when presenting ruby content inline, without using ruby-specific layout. This may happen when using a user agent that does not support ruby layout, or for stylistic reasons. In typical ruby layout, it is not displayed.   is annotated with its phonetic reading. Furthermore, it uses rp so that in legacy user agents the readings are in parentheses: ... < ruby >   < rb >   < rp >   < rt >   < rt >   < rp >   </ ruby > ... In this example, each ideograph in the textis annotated with its phonetic reading. Furthermore, it usesso that in legacy user agents the readings are in parentheses: In user agents that support ruby layout, the rendering omit the parentheses, but in user agents that do not, the rendering would be: ... ... rp elements as well: < ruby > < rb >   < rp > : < rt > Heart < rp > , < rtc lang = fr > C ur </ rtc >< rp > . </ rp > < rb >   < rp > : < rt > Shamrock < rp > , < rtc lang = fr > Tr fle </ rtc >< rp > . </ rp > < rb >   < rp > : < rt > Star < rp > , < rtc lang = fr >  toile </ rtc >< rp > . </ rp > </ ruby > Here a contrived example showing some symbols with names given in English and French using double-sided annotations, withelements as well: This would make the example render as follows in non-ruby-capable user agents:  : Heart, C ur .  : Shamrock, Tr fle .  : Star,  toile . An rb element s end tag may be omitted if the rb element is immediately followed by an rb , rt , rtc or rp element, or if there is no more content in the parent element. An rt element s end tag may be omitted if the rt element is immediately followed by an rb , rt , rtc or rp element, or if there is no more content in the parent element. An rtc element s end tag may be omitted if the rtc element is immediately followed by an rb or rtc element, or if there is no more content in the parent element. An rp element s end tag may be omitted if the rp element is immediately followed by an rb , rt , rtc or rp element, or if there is no more content in the parent element. 4. Rendering The following rules are added to the HTML user agent style sheet: ruby { display : ruby ; } rb { display : ruby-base ; white-space : nowrap ; } rbc { display : ruby-base-container ; } /* For compatibility with XHTML-inspired markup */ rp { display : none ; } rt { display : ruby-text ; } rtc { display : ruby-text-container ; } ruby , rb , rbc , rt , rtc { unicode-bidi : isolate ; } rtc , rt { font-variant-east-asian : ruby ; text-emphasis : none ; white-space : nowrap ; line-height : 1 ; } rtc , :not ( rtc ) > rt { font-size : 50 % ; } rtc :lang ( zh-TW ), :not ( rtc ) > rt :lang ( zh-TW ) { font-size : 30 % ; } 5. Conforming Features rb and rtc are included in the list of  entirely obsolete  elements which  must not be used by authors  in Even thoughandare included in the list of  entirely obsolete  elements which  must not be used by authors  in HTML   16.2 Non-conforming features , this specification revokes this obsolete status, and deems these two elements fully conforming. Appendix A: Editorial Tweaks to HTML This section is non-normative