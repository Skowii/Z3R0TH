To find the minimum and maximum value in a JavaScript numeric array, use `Math.min()` and `Math.max()` functions respectively. For example, with an array `nums = [2, 4, 6, 8, 1, 3, 5, 7]`, you would do:

```js
Math.max(...nums); // 8
Math.min(...nums); // 1
```

To find `n` minimum or maximum values, first sort the array in ascending or descending order using `Array.prototype.sort()`, clone the array using the spread operator (`...`), and use `Array.prototype.slice()` to get the first `n` elements of the sorted array. If `n` is not provided, you'll get the first element of the array. If `n` is greater than or equal to the length of the array, you'll get the original array back.

```js
const minN = (arr, n = 1) => [...arr].sort((a, b) => a - b).slice(0, n);
const maxN = (arr, n = 1) => [...arr].sort((a, b) => b - a).slice(0, n);
```

For more complex cases like finding the min/max value in an array of objects, you can use `Array.prototype.map()`. Given an appropriate function or property name, map the array to an array of values and then use the same approach as above.

```js
const minBy = (arr, fn) => Math.min(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));
const maxBy = (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));
```

For example:

```js
minBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], x => x.n); // 2
maxBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 8
```