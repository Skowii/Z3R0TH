The Decorator pattern is a structural design pattern that allows dynamic addition of responsibilities to an object without the need to create new subclasses. This provides a flexible alternative to making functional extensions through subclasses in runtime. In simple terms, it involves wrapping an object with a decorating class at runtime to dynamically change its behavior. Wikipedia explains that this design pattern is both static and dynamic, allowing for functions to be added to individual objects without affecting their existing functionality. It's also useful in following the single responsibility principle (SRP) by separating distinct responsibilities into different classes and the open-closed principle (OCP), as it allows for class functions to be extended without modification. This design pattern is particularly applicable when other options like subclassing are not practical or when there are many independent extensions that would result in an explosion of subclasses. It's also useful when a class definition is hidden or subclass creation is impossible.