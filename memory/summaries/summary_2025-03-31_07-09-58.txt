El patrón de estado es un diseño de comportamiento que permite a un objeto cambiar su comportamiento cuando cambia su estado interno. Se aplica en situaciones donde un objeto necesita alterar su comportamiento en función de distintos estados. Este patrón se relaciona con la idea de máquinas de estado finito y también puede ser interpretado como una versión del patrón de estrategia que permite cambiar una estrategia a través de invocaciones de métodos definidos por el usuario. 

Por ejemplo, un mamut en su hábitat natural parece cambiar su comportamiento en función de la situación, pasando de ser tranquilo a enfadado cuando detecta una amenaza. En términos de programación, se puede implementar mediante una interfaz y sus clases concretas. Un ejemplo en Java muestra cómo un mamut cambia de estado en función del tiempo que pasa, alternando entre comportamientos de paz y furia.