The Multiton pattern in Java ensures unique named instances of a class and provides global access to them through keys. This design pattern is an extension of the Singleton pattern, allowing for the control creation of multiple instances instead of just one. In real-world scenarios, it can help manage resources efficiently. An example in Java involves creating multiple instances with different departmental names and retrieving them based on their department name. To implement the Multiton pattern, a Map is used to store named instances.