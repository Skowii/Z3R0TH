Implement the Levenshtein distance algorithm in JavaScript to calculate the difference between two strings:

1. Start by checking the length of each string. If either of them is zero, return the length of the other one.
2. Create an empty 2D array. Use a for loop to iterate over the letters of the target string and a nested for loop to iterate over the letters of the source string.
3. Calculate the cost of substitution for the letters corresponding to `i - 1` and `j - 1` in the target and source respectively (0 if they are the same, 1 otherwise).
4. Use `Math.min()` to populate each element in the 2D array with the minimum of the cell above incremented by one, the cell to the left incremented by one or the cell to the top left incremented by the previously calculated cost.
5. Return the last element of the last row of the produced array. This is the Levenshtein distance between the two strings.

The time complexity of this algorithm is O(mn), where m and n are the lengths of the two strings. The space complexity is also O(mn). A possible modification to reduce the space complexity to O(min(m, n)) is possible by using two arrays of length min(m, n) + 1 instead of a 2D array.