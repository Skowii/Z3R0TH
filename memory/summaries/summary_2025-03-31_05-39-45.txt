Le patron "active object" sépare l'exécution et l'invocation des méthodes pour les objets qui résident dans leur fil de contrôle, introduisant ainsi la concurrence avec l'invocation asynchrone et un planificateur pour gérer les demandes. Une classe ActiveCreature contient un mécanisme d'auto-synchronisation sans utiliser de méthodes "synchronisées". Dans un exemple, une créature, telle qu'un Orc, hérite de la classe ActiveCreature et aura son propre fil de contrôle pour invoquer et exécuter les méthodes.