Create a debounced function that returns a promise by using timeouts to limit the number of function calls and keeping track of all pending promises. Clear the current pending timeout with `clearTimeout()`, create a new timeout with `setTimeout()` each time the debounced function is invoked, and apply the `this` context using `Function.prototype.apply()`. Keep track of all pending promises in an array and resolve or reject them when the function is invoked with the same data for all promises created in the meantime.