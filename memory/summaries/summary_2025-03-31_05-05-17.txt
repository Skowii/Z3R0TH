Delegation, also known as Proxy Pattern, is a design pattern that allows an object to communicate with another object instead of itself while delegating the execution responsibility. This can be illustrated by the example of having two warriors fighting hawks with different weapons based on their abilities and strengths. The goal is to equip them without the need to modify the source code for each weapon. Delegation achieves this by dynamically assigning work to a specific object to perform related methods. Wikipedia defines delegation as "delegating an attribute (property or method) of an object (the future) to another object in the context of an object (the sender)."

Delegation can be done explicitly, by passing the sent object to the receiving object, which can be accomplished in any object-oriented language. Alternatively, it can be done implicitly through a search for attributes within the language, requiring language support for this functionality.

An example of delegation is given with an interface Printer and three implementations: CanonPrinter, EpsonPrinter, and HpPrinter. The PrinterController class can use any of these printers by delegating their tasks to them. The client code can now print messages using different printers based on the designated printer object. This approach separates concerns and promotes modular design while allowing for different implementations to be used interchangeably.