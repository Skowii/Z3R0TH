Decorator is a structural design pattern that allows dynamic addition of responsibilities to objects, providing an alternative to inheritance for expanding functions. The decorator offers a way to change the behavior of an object dynamically while it's running by wrapping it with a class from the Decorator pattern. Wikipedia states that the Decorator pattern is a design approach that allows adding functionality to an object individually, either through static or dynamic ways, without affecting the behavior of other objects in the same class. The decorator is considered beneficial for encapsulating responsibility and separating functions between classes with different areas of concern, as well as for the Open-Closed principle, by allowing the expansion of class functions without modifying them.