This article is part of a series on implementing the ActiveRecord pattern in JavaScript with object attributes and relationships. The previous article focused on modeling complex object collections in memory, setting up a Model and RecordSet for data management and interaction. In this second part, we explore attributes and relationships between models, as well as making optimizations to our implementation for improved performance. A new model (Author) is added in the 'models' directory, along with changes to existing core files ('core/model.js' and 'recordSet.js'). The author model includes data attributes such as name, surname, email address, and id, demonstrating a seamless approach using getter functions for accessing object properties and methods alike.