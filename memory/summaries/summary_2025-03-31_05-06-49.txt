The Active Object pattern separates the execution model from invoking it for objects that work in a separate control loop. The goal is to introduce non-blocking method invocations and scheduling for request management. The class implementing the Active Object design pattern contains an internal, self-synchronizing mechanism without using synchronized methods. 

In a real-world example, creatures like orcs can be developed with their own control loop and API, but not the actual execution. An example of the ActiveCreature class:

```java
public abstract class ActiveCreature {
    private final Logger logger = LoggerFactory.getLogger(ActiveCreature.class.getName());
    private BlockingQueue<Runnable> requests;
    private String name;
    private Thread thread;
    public ActiveCreature(String name) {
        this.name = name;
        this.requests = new LinkedBlockingQueue<Runnable>();
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        requests.take().run();
                    } catch (InterruptedException e) {
                        logger.error(e.getMessage());
                    }
                }
            }
        });
        thread.start();
    }
    public void eat() throws InterruptedException {
        requests.put(new Runnable() {
            @Override
            public void run() {
                logger.info("{} is eating!", name());
                logger.info("{} has finished eating!", name());
            }
        });
    }
    public void roam() throws InterruptedException {
        requests.put(new Runnable() {
            @Override
            public void run() {
                logger.info("{} has started to roam the wastelands.", name());
            }
        });
    }
    public String name() {
        return this.name;
    }
}
```

This allows multiple creatures, like orcs, to be created and managed in their own control loop. For example:

```java
public class Orc extends ActiveCreature {
    public Orc(String name) {
        super(name);
    }
}
```

In the main method, you can create multiple creatures and ask them to eat and roam in their control loops:

```java
public static void main(String[] args) {
    var app = new App();
    app.run();
}
@Override
public void run() {
    ActiveCreature creature;
    try {
        for (int i = 0; i < creatures; i++) {
            creature = new Orc(Orc.class.getSimpleName().toString() + i);
            creature.eat();
            creature.roam();
        }
        Thread.sleep(1000);
    } catch (InterruptedException e) {
        logger.error(e.getMessage());
    }
    Runtime.getRuntime().exit(1);
}
```

A class diagram of the Active Object pattern is shown below:

![alt text](./etc/active-object.urm.png "Active Object class diagram")