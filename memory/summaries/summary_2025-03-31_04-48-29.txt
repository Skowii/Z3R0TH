Decorator Pattern is a structural design pattern that allows dynamic addition of responsibilities to an object without subclassing. It provides a flexible and extensible way to modify the behavior of an object at runtime. The pattern involves wrapping a decorator class around the original object, and altering its behavior without affecting its interface or other instances. This can be applied when adding responsibilities dynamically and transparently, when encapsulating behaviors to separate concerns, or when subclassing is not feasible due to the large number of possible extensions.