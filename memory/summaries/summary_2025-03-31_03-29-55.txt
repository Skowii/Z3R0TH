The Data Mapper Pattern in Java aims to decouple database operations from business logic by creating an abstraction layer between them. It maps data from the database objects to in-memory data structures, and vice versa, enabling independent evolution of each layer. This pattern promotes maintainability and flexibility in Java applications.

In a real-world example, using a Data Mapper pattern for a library system with complex book records can be beneficial. It separates application business logic from the database schema, allowing easy changes without affecting the other layer. The Data Mapper moves data between objects and a database while keeping them independent.

A programmatic example in Java demonstrates the pattern using a `Student` class and a `StudentDataMapper` interface. This decoupling promotes the Single Responsibility Principle and Separation of Concerns, increasing maintainability and flexibility in Java applications.