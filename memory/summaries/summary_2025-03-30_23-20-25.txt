Writing efficient Python code involves understanding the structure of a snippet and making optimizations to improve performance. In this example, we discuss a difference function that returns the items in one list not present in another. A first implementation has a limitation with duplicate values in the second list and requires evaluating `set()` for every item. An improved version is slower as it calls `set()` inside the comprehension. The solution is to call `set()` once before the list comprehension, and store the result for faster processing. Another method to improve performance is using a list comprehension instead of `filter()` and `list()`.