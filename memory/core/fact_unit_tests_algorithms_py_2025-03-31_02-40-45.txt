# SOURCE: unit_tests_algorithms.py
# TIME: 2025-03-31_02-40-45

c: 89% | ETA: 1min 37s| ETA remaining: 00:37
 [INFO] Creating task graph...
 [INFO] Running task 4 (toy-dsl/test_sqrt_sampling)...
 [INFO] Starting run of task 4: test_sqrt_sampling
 [INFO] Loading program 1 from toy-dsl.

# TAGS: does not miss any program and if it outputs programs in decreasing order.
        """

        N = 10_000  # number of programs to be generated by heap search
        K = 1000  # number of programs to be sampled from the PCFG

        deepcoder = DSL(semantics, primitive_types)
        type_request = Arrow(List(INT), List(INT))
        deepcoder_CFG = deepcoder.DSL_to_CFG(type_request)
        deepcoder_PCFG = deepcoder_CFG.CFG_to_Random_PCFG()

        gen_threshold_search = bounded_threshold(deepcoder_PCFG, 0.1)
        gen_sampling = deepcoder_PCFG.sampling()

        seen_sampling = set()
        seen_threshold_search = set()

        current_probability = 1
        for i in range(N):
            program = next(gen_threshold_search)
            new_probability = deepcoder_PCFG.probability_program(
                deepcoder_PCFG.start, program
            )
            self.assertLessEqual(new_probability, current_probability + 10e-15)
            current_probability = new_probability
            seen_threshold_search.add(str(program))

        min_proba = current_probability

        while len(seen_sampling) < K:
            program = next(gen_sampling)
            if (
                deepcoder_PCFG.probability_program(deepcoder_PCFG.start, program)
                >= min_proba
            ):
                seen_sampling.add(str(program))

        diff = seen_sampling - seen_threshold_search
        self.assertEqual(0, len(diff))
